// --------------------------------------------------------------------------------------
// Sacara FAKE build script
// --------------------------------------------------------------------------------------
#r "paket: groupref FakeBuild //"
#load ".fake/build.fsx/intellisense.fsx"

open System
open System.Reflection
open System.Text
open System.IO
open Fake.DotNet
open Fake.Core
open Fake.IO
open Fake.Core.TargetOperators
open Fake.IO.Globbing.Operators
open System.Security.Cryptography
 
// The name of the project
let project = "Sacara"

// Short summary of the project
let description = "A VM stack based IR language well suite for code protection."

// List of author names (for NuGet package)
let authors = [ "Enkomio" ]

// Build dir
let buildDir = Path.GetFullPath("build")

// Package dir
let deployDir = Path.GetFullPath("deploy")

// project list
let nativeProjects = [        
    ("SacaraVm.vcxproj", Some "SacaraVm.props")
    ("SacaraVmLib.vcxproj", Some "SacaraVmLib.props")
    ("SacaraRun.vcxproj", Some "SacaraRun.props")
]

let dotNetProjects = [        
    ("SacaraAsm.fsproj", None)
    ("ES.SacaraVm.fsproj", None)
]

let buildOptions = [
    ("ENABLE_CODE_RELOCATION", 1)
    ("ENABLE_ANTI_DEBUGGING", 1)
]
let buildOptionsFilename = Path.Combine("SacaraVm", "build_options.inc")
let savedBuildOptions = File.ReadAllText(buildOptionsFilename)

let projects = nativeProjects@dotNetProjects

// Read additional information from the release notes document
let releaseNotesData = 
    let changelogFile = Path.Combine("..", "RELEASE_NOTES.md")
    File.ReadAllLines(changelogFile)
    |> ReleaseNotes.parse
    
let releaseNoteVersion = Version.Parse(releaseNotesData.AssemblyVersion)
let now = DateTime.UtcNow
let timeSpan = now.Subtract(new DateTime(1980,2,1,0,0,0))
let months = timeSpan.TotalDays / 30. |> int32
let remaining = int32 timeSpan.TotalDays - months * 30
let releaseVersion = string <| new Version(releaseNoteVersion.Major, releaseNoteVersion.Minor, months, remaining)
Trace.trace("Build Version: " + releaseVersion)

let genFSAssemblyInfo (projectFile) =
    let projectPath = Path.GetDirectoryName(projectFile)
    let projectName = Path.GetFileNameWithoutExtension(projectPath)
    let fileName = Path.Combine(projectPath, "AssemblyInfo.fs")

    AssemblyInfoFile.createFSharp fileName
        [ 
            AssemblyInfo.Title projectName        
            AssemblyInfo.Product project
            AssemblyInfo.Company (authors |> String.concat ", ")
            AssemblyInfo.Description description
            AssemblyInfo.Version releaseVersion
            AssemblyInfo.FileVersion releaseVersion
            AssemblyInfo.InformationalVersion releaseVersion
            AssemblyInfo.Metadata("BuildDate", DateTime.UtcNow.ToString("yyyy-MM-dd")) 
        ]
        
(*
    FAKE targets
*)
Target.create "Clean" (fun _ ->
    nativeProjects
    |> List.iter(fun (projectFile, _) ->
        let projName = Path.GetFileNameWithoutExtension(projectFile)
        let projReleaseDir = Path.Combine(projName, "Release")
        Shell.cleanDir projReleaseDir
    )

    Shell.cleanDir buildDir
    Directory.ensure buildDir

    Shell.cleanDir deployDir
    Directory.ensure deployDir
)

Target.create "SetAssemblyInfo" (fun _ ->
    !! "*/**/*.fsproj"
    |> Seq.iter genFSAssemblyInfo    
)

let setBuildOptions() =
    let buildOptionsContent = new StringBuilder()
    buildOptionsContent
        .AppendLine("; #########################################################")
        .AppendLine("; # DO NOT EDIT THIS FILE, WAIT FOR BUILDING COMPLETATION #")
        .AppendLine("; #########################################################")
        .AppendLine() |> ignore

    buildOptions
    |> List.iter(fun (name, value) -> 
        buildOptionsContent.AppendFormat("{0} = {1}", name, value).AppendLine() |> ignore
    )
    File.WriteAllText(buildOptionsFilename, buildOptionsContent.ToString())

let restoreBuildOptions() =
    File.WriteAllText(buildOptionsFilename, savedBuildOptions)
    
Target.create "Compile" (fun _ ->    
    let build(project: String, buildDir: String, propsFile: String option) =        
        let fileName = Path.GetFileNameWithoutExtension(project)
        let buildAppDir = Path.Combine(buildDir, fileName)
        Directory.ensure buildAppDir

        let setParams (defaults: MSBuildParams) =   
            match propsFile with
            | None -> defaults
            | Some propsFile ->
                let projPropsFile = Path.GetFullPath(propsFile)
                Trace.log("Props file: " + projPropsFile)
                { defaults with
                    Properties = ["ForceImportBeforeCppTargets", projPropsFile]
                 }

        // build the project
        [project]
        |> MSBuild.runRelease setParams buildAppDir "ReBuild"
        |> Trace.logItems "AppBuild-Output: "
    
    // build all projects
    try
        setBuildOptions()
        projects
        |> List.map(fun (projName, propsFile) ->
            let projDir = Path.GetFileNameWithoutExtension(projName)
            let projFile = Path.Combine(projDir, projName)
            (projFile, propsFile)
        )
        |> List.iter(fun (projectFile, propsFile) -> 
            build(projectFile, buildDir, propsFile)
        )
    finally
        restoreBuildOptions()
)

Target.create "Release" (fun _ ->    
    let filterFile(file: String) =
        [".pdb"; ".iobj"; ".ipdb"]
        |> List.contains (Path.GetExtension(file).ToLowerInvariant())

    let cleanDir(directory: String) =
        Directory.GetFiles(directory, "*.*", SearchOption.AllDirectories)
        |> Array.filter(filterFile) 
        |> Array.iter(File.Delete)
        
    let deployProjectDir(projName: String) =
        let destDir = Path.Combine(deployDir, projName)
        Shell.copyDir destDir (Path.Combine(buildDir, projName)) (fun _ -> true)
        cleanDir(destDir)

    // copy ES.Sacara
    deployProjectDir("ES.SacaraVm")

    // copy SacaraAsm
    deployProjectDir("SacaraAsm")

    // copy SacaraRun
    Shell.copyFile (Path.Combine(deployDir, "SacaraRun.exe")) (Path.Combine(buildDir, "SacaraRun", "SacaraRun.exe"))

    // copy lib
    Shell.copyFile (Path.Combine(deployDir, "SacaraVm.lib")) (Path.Combine(buildDir, "SacaraVm", "SacaraVm.lib"))

    // copy DLL
    Shell.copyFile (Path.Combine(deployDir, "SacaraVm.dll")) (Path.Combine(buildDir, "SacaraVmLib", "SacaraVm.dll"))
    Shell.copyFile (Path.Combine(deployDir, "ES.SacaraVm", "SacaraVm.dll")) (Path.Combine(buildDir, "SacaraVmLib", "SacaraVm.dll"))
)

Target.create "Package" (fun _ ->
    // zip directories
    Directory.GetFiles(Path.Combine(deployDir, "ES.SacaraVm"), "*.*", SearchOption.AllDirectories)
    |> Zip.zip (Path.Combine(deployDir, "ES.SacaraVm")) (Path.Combine(deployDir, "ES.SacaraVm.zip"))
    Shell.deleteDir (Path.Combine(deployDir, "ES.SacaraVm"))
    
    // zip
    Directory.GetFiles(Path.Combine(deployDir, "SacaraAsm"), "*.*", SearchOption.AllDirectories)
    |> Zip.zip (Path.Combine(deployDir, "SacaraAsm")) (Path.Combine(deployDir, "SacaraAsm.zip"))    
    Shell.deleteDir (Path.Combine(deployDir, "SacaraAsm"))
)

Target.create "Summary" (fun _ ->
    let v = Version.Parse(releaseVersion)
    let githubVersion = String.Format("{0}.{1}", v.Major, v.Minor)
    let summary = new StringBuilder()

    let sha1(file: String) =
        let bs = File.ReadAllBytes(file)
        use ms = new MemoryStream()
        ms.Write(bs, 0, bs.Length)
        ms.Seek(0L, SeekOrigin.Begin) |> ignore
        use sha = new SHA1Managed()
        BitConverter.ToString(sha.ComputeHash(ms)).Replace("-", "").ToLower()

    let addFile(fileName: String) =
        let file = Path.Combine(deployDir, fileName)
        summary.AppendFormat("|[**{0}**](https://github.com/enkomio/sacara/releases/download/{1}/{0})|``{2}``", fileName, githubVersion, sha1(file)).AppendLine() |> ignore
           
    // create output
    summary.AppendLine("## Files").AppendLine().AppendLine("|File|SHA-1|").AppendLine("|-------|----|") |> ignore

    addFile("SacaraVm.dll")
    addFile("SacaraVm.lib")
    addFile("ES.SacaraVm.zip")
    addFile("SacaraAsm.zip")
    addFile("SacaraRun.exe")

    Console.WriteLine(summary)
)

Target.description "Default Build all artifacts"
Target.create "Full" ignore

// define task chain
"Clean"
    ==> "SetAssemblyInfo"
    ==> "Compile"
    ==> "Release"
    ==> "Package"
    ==> "Summary"
    ==> "Full"
    
// start build
Target.runOrDefault "Full"