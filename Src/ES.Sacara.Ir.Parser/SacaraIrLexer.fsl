{
module ES.Sacara.Ir.Parser.SacaraIrLexer

open System
open ES.Sacara.Ir.Parser.IrLexerUtility
open Microsoft.FSharp.Text.Lexing
open ES.Sacara.Ir.Parser.SacaraIrParser

}

// atom
let digit = ['0'-'9']
let hexDigit = ['0'-'9' 'a'-'f' 'A'-'F']
let character = ['a'-'z' 'A'-'Z']

// identifier
let identifier = character (character | digit | '_')*
let label = identifier ':'
let directive = '.' identifier

// strings items
let hexChar = "\\x" hexDigit hexDigit

// number types
let integer = ("+"|"-") digit+ | digit+ | "0x" hexDigit+

// global statements
let globalKeywords = "include"

// formatting
let linuxLineTerminator = "\n"
let windowsLineTerminator = "\r\n"
let lineTerminator = windowsLineTerminator | linuxLineTerminator
let whitespace = [' ' '\t' ]

rule irCode = parse	
	| globalKeywords													{ globalStatement lexbuf }
	| integer															{ integer lexbuf }	
	| label																{ label lexbuf }
	| directive															{ directive lexbuf }
	| identifier														{ identifier lexbuf }		
	| '+'																{ newToken PLUS_OP lexbuf }
	| '-'																{ newToken MINUS_OP lexbuf }
	| '*'																{ newToken MUL_OP lexbuf }
	| "//" [^ '\n' '\r']* lineTerminator								{ newToken NEWLINE (nextLine lexbuf) }
	| '/'																{ newToken DIV_OP lexbuf }
	| ','																{ newToken COMMA lexbuf }
	| '"'																{ doubleQuoteString String.Empty false lexbuf }
	| '('																{ newToken LPAREN lexbuf }
	| ')'																{ newToken RPAREN lexbuf }
	| lineTerminator													{ newToken NEWLINE (nextLine lexbuf) }
	| whitespace														{ irCode(noToken lexbuf) }
	| "/*" 																{ multilineComment lexbuf; irCode lexbuf }
	| eof																{ newToken EOF lexbuf }
	
and multilineComment = parse
	| "*/"																{ () }
	| [^'*' '\r' '\n']+													{ multilineComment lexbuf }
	| lineTerminator													{ multilineComment(nextLine lexbuf) }
	| _																	{ multilineComment lexbuf }

and doubleQuoteString currentString ignoreQuote = parse
	| hexChar															{ doubleQuoteString (currentString + (getHexString lexbuf)) false lexbuf }
	| '\\' _															{ doubleQuoteString currentString true lexbuf }
	| [^'"' '\\']+														{ doubleQuoteString (currentString + (getString lexbuf)) false lexbuf }
	| '"'																{ if ignoreQuote then ((doubleQuoteString (currentString + (getString lexbuf)) false lexbuf)) else (STRING currentString) }