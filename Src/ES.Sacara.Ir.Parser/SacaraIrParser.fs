// Implementation file for parser generated by fsyacc
module ES.Sacara.Ir.Parser.SacaraIrParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"


open System
open ES.Sacara.Ir.Parser.IrAst
open ES.Sacara.Ir.Parser.IrParserUtility


# 14 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | INTEGER of (int32)
  | LABEL of (string)
  | IDENTIFIER of (string)
  | STRING of (string)
  | INVOKE_DIRECTIVE of (string)
  | INCLUDE
  | SHIFTR_DIRECTIVE
  | SHIFTL_DIRECTIVE
  | XOR_DIRECTIVE
  | NOR_DIRECTIVE
  | INC_DIRECTIVE
  | NWRITEB_DIRECTIVE
  | NWRITEW_DIRECTIVE
  | NWRITEDW_DIRECTIVE
  | NREADB_DIRECTIVE
  | NREADW_DIRECTIVE
  | NREADDW_DIRECTIVE
  | WRITEB_DIRECTIVE
  | WRITEW_DIRECTIVE
  | WRITEDW_DIRECTIVE
  | READB_DIRECTIVE
  | READW_DIRECTIVE
  | READDW_DIRECTIVE
  | ADD_DIRECTIVE
  | SUB_DIRECTIVE
  | MUL_DIRECTIVE
  | DIV_DIRECTIVE
  | CMP_DIRECTIVE
  | AND_DIRECTIVE
  | OR_DIRECTIVE
  | LPAREN
  | RPAREN
  | JUMP_DIRECTIVE
  | SET_DIRECTIVE
  | PLUS_OP
  | MINUS_OP
  | MUL_OP
  | DIV_OP
  | DIV
  | AND
  | SHIFTR
  | SHIFTL
  | OR
  | NOT
  | XOR
  | NOR
  | SETIP
  | SETSP
  | INC
  | EOF
  | CMP
  | GETSP
  | SWRITE
  | SREAD
  | BYTE
  | WORD
  | DWORD
  | NEWLINE
  | COMMA
  | SUB
  | MUL
  | GETIP
  | RET
  | JUMP
  | JUMPIFL
  | JUMPIFLE
  | JUMPIFG
  | JUMPIFGE
  | ALLOCA
  | HALT
  | PROC
  | ENDP
  | PUSH
  | POP
  | ADD
  | NOP
  | CALL
  | NCALL
  | WRITE
  | NWRITE
  | READ
  | NREAD
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_INTEGER
    | TOKEN_LABEL
    | TOKEN_IDENTIFIER
    | TOKEN_STRING
    | TOKEN_INVOKE_DIRECTIVE
    | TOKEN_INCLUDE
    | TOKEN_SHIFTR_DIRECTIVE
    | TOKEN_SHIFTL_DIRECTIVE
    | TOKEN_XOR_DIRECTIVE
    | TOKEN_NOR_DIRECTIVE
    | TOKEN_INC_DIRECTIVE
    | TOKEN_NWRITEB_DIRECTIVE
    | TOKEN_NWRITEW_DIRECTIVE
    | TOKEN_NWRITEDW_DIRECTIVE
    | TOKEN_NREADB_DIRECTIVE
    | TOKEN_NREADW_DIRECTIVE
    | TOKEN_NREADDW_DIRECTIVE
    | TOKEN_WRITEB_DIRECTIVE
    | TOKEN_WRITEW_DIRECTIVE
    | TOKEN_WRITEDW_DIRECTIVE
    | TOKEN_READB_DIRECTIVE
    | TOKEN_READW_DIRECTIVE
    | TOKEN_READDW_DIRECTIVE
    | TOKEN_ADD_DIRECTIVE
    | TOKEN_SUB_DIRECTIVE
    | TOKEN_MUL_DIRECTIVE
    | TOKEN_DIV_DIRECTIVE
    | TOKEN_CMP_DIRECTIVE
    | TOKEN_AND_DIRECTIVE
    | TOKEN_OR_DIRECTIVE
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_JUMP_DIRECTIVE
    | TOKEN_SET_DIRECTIVE
    | TOKEN_PLUS_OP
    | TOKEN_MINUS_OP
    | TOKEN_MUL_OP
    | TOKEN_DIV_OP
    | TOKEN_DIV
    | TOKEN_AND
    | TOKEN_SHIFTR
    | TOKEN_SHIFTL
    | TOKEN_OR
    | TOKEN_NOT
    | TOKEN_XOR
    | TOKEN_NOR
    | TOKEN_SETIP
    | TOKEN_SETSP
    | TOKEN_INC
    | TOKEN_EOF
    | TOKEN_CMP
    | TOKEN_GETSP
    | TOKEN_SWRITE
    | TOKEN_SREAD
    | TOKEN_BYTE
    | TOKEN_WORD
    | TOKEN_DWORD
    | TOKEN_NEWLINE
    | TOKEN_COMMA
    | TOKEN_SUB
    | TOKEN_MUL
    | TOKEN_GETIP
    | TOKEN_RET
    | TOKEN_JUMP
    | TOKEN_JUMPIFL
    | TOKEN_JUMPIFLE
    | TOKEN_JUMPIFG
    | TOKEN_JUMPIFGE
    | TOKEN_ALLOCA
    | TOKEN_HALT
    | TOKEN_PROC
    | TOKEN_ENDP
    | TOKEN_PUSH
    | TOKEN_POP
    | TOKEN_ADD
    | TOKEN_NOP
    | TOKEN_CALL
    | TOKEN_NCALL
    | TOKEN_WRITE
    | TOKEN_NWRITE
    | TOKEN_READ
    | TOKEN_NREAD
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startprogram
    | NONTERM_program
    | NONTERM_sourceElementList
    | NONTERM_globalStatement
    | NONTERM_procDefinition
    | NONTERM_parameterList
    | NONTERM_statementList
    | NONTERM_statement
    | NONTERM_statementNoLabel
    | NONTERM_directives
    | NONTERM_argumentList
    | NONTERM_primaryExpression
    | NONTERM_expression
    | NONTERM_additiveExpression
    | NONTERM_multiplicativeExpression
    | NONTERM_integerList
    | NONTERM_dataList
    | NONTERM_data

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | INTEGER _ -> 0 
  | LABEL _ -> 1 
  | IDENTIFIER _ -> 2 
  | STRING _ -> 3 
  | INVOKE_DIRECTIVE _ -> 4 
  | INCLUDE  -> 5 
  | SHIFTR_DIRECTIVE  -> 6 
  | SHIFTL_DIRECTIVE  -> 7 
  | XOR_DIRECTIVE  -> 8 
  | NOR_DIRECTIVE  -> 9 
  | INC_DIRECTIVE  -> 10 
  | NWRITEB_DIRECTIVE  -> 11 
  | NWRITEW_DIRECTIVE  -> 12 
  | NWRITEDW_DIRECTIVE  -> 13 
  | NREADB_DIRECTIVE  -> 14 
  | NREADW_DIRECTIVE  -> 15 
  | NREADDW_DIRECTIVE  -> 16 
  | WRITEB_DIRECTIVE  -> 17 
  | WRITEW_DIRECTIVE  -> 18 
  | WRITEDW_DIRECTIVE  -> 19 
  | READB_DIRECTIVE  -> 20 
  | READW_DIRECTIVE  -> 21 
  | READDW_DIRECTIVE  -> 22 
  | ADD_DIRECTIVE  -> 23 
  | SUB_DIRECTIVE  -> 24 
  | MUL_DIRECTIVE  -> 25 
  | DIV_DIRECTIVE  -> 26 
  | CMP_DIRECTIVE  -> 27 
  | AND_DIRECTIVE  -> 28 
  | OR_DIRECTIVE  -> 29 
  | LPAREN  -> 30 
  | RPAREN  -> 31 
  | JUMP_DIRECTIVE  -> 32 
  | SET_DIRECTIVE  -> 33 
  | PLUS_OP  -> 34 
  | MINUS_OP  -> 35 
  | MUL_OP  -> 36 
  | DIV_OP  -> 37 
  | DIV  -> 38 
  | AND  -> 39 
  | SHIFTR  -> 40 
  | SHIFTL  -> 41 
  | OR  -> 42 
  | NOT  -> 43 
  | XOR  -> 44 
  | NOR  -> 45 
  | SETIP  -> 46 
  | SETSP  -> 47 
  | INC  -> 48 
  | EOF  -> 49 
  | CMP  -> 50 
  | GETSP  -> 51 
  | SWRITE  -> 52 
  | SREAD  -> 53 
  | BYTE  -> 54 
  | WORD  -> 55 
  | DWORD  -> 56 
  | NEWLINE  -> 57 
  | COMMA  -> 58 
  | SUB  -> 59 
  | MUL  -> 60 
  | GETIP  -> 61 
  | RET  -> 62 
  | JUMP  -> 63 
  | JUMPIFL  -> 64 
  | JUMPIFLE  -> 65 
  | JUMPIFG  -> 66 
  | JUMPIFGE  -> 67 
  | ALLOCA  -> 68 
  | HALT  -> 69 
  | PROC  -> 70 
  | ENDP  -> 71 
  | PUSH  -> 72 
  | POP  -> 73 
  | ADD  -> 74 
  | NOP  -> 75 
  | CALL  -> 76 
  | NCALL  -> 77 
  | WRITE  -> 78 
  | NWRITE  -> 79 
  | READ  -> 80 
  | NREAD  -> 81 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_INTEGER 
  | 1 -> TOKEN_LABEL 
  | 2 -> TOKEN_IDENTIFIER 
  | 3 -> TOKEN_STRING 
  | 4 -> TOKEN_INVOKE_DIRECTIVE 
  | 5 -> TOKEN_INCLUDE 
  | 6 -> TOKEN_SHIFTR_DIRECTIVE 
  | 7 -> TOKEN_SHIFTL_DIRECTIVE 
  | 8 -> TOKEN_XOR_DIRECTIVE 
  | 9 -> TOKEN_NOR_DIRECTIVE 
  | 10 -> TOKEN_INC_DIRECTIVE 
  | 11 -> TOKEN_NWRITEB_DIRECTIVE 
  | 12 -> TOKEN_NWRITEW_DIRECTIVE 
  | 13 -> TOKEN_NWRITEDW_DIRECTIVE 
  | 14 -> TOKEN_NREADB_DIRECTIVE 
  | 15 -> TOKEN_NREADW_DIRECTIVE 
  | 16 -> TOKEN_NREADDW_DIRECTIVE 
  | 17 -> TOKEN_WRITEB_DIRECTIVE 
  | 18 -> TOKEN_WRITEW_DIRECTIVE 
  | 19 -> TOKEN_WRITEDW_DIRECTIVE 
  | 20 -> TOKEN_READB_DIRECTIVE 
  | 21 -> TOKEN_READW_DIRECTIVE 
  | 22 -> TOKEN_READDW_DIRECTIVE 
  | 23 -> TOKEN_ADD_DIRECTIVE 
  | 24 -> TOKEN_SUB_DIRECTIVE 
  | 25 -> TOKEN_MUL_DIRECTIVE 
  | 26 -> TOKEN_DIV_DIRECTIVE 
  | 27 -> TOKEN_CMP_DIRECTIVE 
  | 28 -> TOKEN_AND_DIRECTIVE 
  | 29 -> TOKEN_OR_DIRECTIVE 
  | 30 -> TOKEN_LPAREN 
  | 31 -> TOKEN_RPAREN 
  | 32 -> TOKEN_JUMP_DIRECTIVE 
  | 33 -> TOKEN_SET_DIRECTIVE 
  | 34 -> TOKEN_PLUS_OP 
  | 35 -> TOKEN_MINUS_OP 
  | 36 -> TOKEN_MUL_OP 
  | 37 -> TOKEN_DIV_OP 
  | 38 -> TOKEN_DIV 
  | 39 -> TOKEN_AND 
  | 40 -> TOKEN_SHIFTR 
  | 41 -> TOKEN_SHIFTL 
  | 42 -> TOKEN_OR 
  | 43 -> TOKEN_NOT 
  | 44 -> TOKEN_XOR 
  | 45 -> TOKEN_NOR 
  | 46 -> TOKEN_SETIP 
  | 47 -> TOKEN_SETSP 
  | 48 -> TOKEN_INC 
  | 49 -> TOKEN_EOF 
  | 50 -> TOKEN_CMP 
  | 51 -> TOKEN_GETSP 
  | 52 -> TOKEN_SWRITE 
  | 53 -> TOKEN_SREAD 
  | 54 -> TOKEN_BYTE 
  | 55 -> TOKEN_WORD 
  | 56 -> TOKEN_DWORD 
  | 57 -> TOKEN_NEWLINE 
  | 58 -> TOKEN_COMMA 
  | 59 -> TOKEN_SUB 
  | 60 -> TOKEN_MUL 
  | 61 -> TOKEN_GETIP 
  | 62 -> TOKEN_RET 
  | 63 -> TOKEN_JUMP 
  | 64 -> TOKEN_JUMPIFL 
  | 65 -> TOKEN_JUMPIFLE 
  | 66 -> TOKEN_JUMPIFG 
  | 67 -> TOKEN_JUMPIFGE 
  | 68 -> TOKEN_ALLOCA 
  | 69 -> TOKEN_HALT 
  | 70 -> TOKEN_PROC 
  | 71 -> TOKEN_ENDP 
  | 72 -> TOKEN_PUSH 
  | 73 -> TOKEN_POP 
  | 74 -> TOKEN_ADD 
  | 75 -> TOKEN_NOP 
  | 76 -> TOKEN_CALL 
  | 77 -> TOKEN_NCALL 
  | 78 -> TOKEN_WRITE 
  | 79 -> TOKEN_NWRITE 
  | 80 -> TOKEN_READ 
  | 81 -> TOKEN_NREAD 
  | 84 -> TOKEN_end_of_input
  | 82 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startprogram 
    | 1 -> NONTERM_program 
    | 2 -> NONTERM_sourceElementList 
    | 3 -> NONTERM_sourceElementList 
    | 4 -> NONTERM_sourceElementList 
    | 5 -> NONTERM_sourceElementList 
    | 6 -> NONTERM_globalStatement 
    | 7 -> NONTERM_procDefinition 
    | 8 -> NONTERM_procDefinition 
    | 9 -> NONTERM_parameterList 
    | 10 -> NONTERM_parameterList 
    | 11 -> NONTERM_parameterList 
    | 12 -> NONTERM_statementList 
    | 13 -> NONTERM_statementList 
    | 14 -> NONTERM_statement 
    | 15 -> NONTERM_statement 
    | 16 -> NONTERM_statementNoLabel 
    | 17 -> NONTERM_statementNoLabel 
    | 18 -> NONTERM_statementNoLabel 
    | 19 -> NONTERM_statementNoLabel 
    | 20 -> NONTERM_statementNoLabel 
    | 21 -> NONTERM_statementNoLabel 
    | 22 -> NONTERM_statementNoLabel 
    | 23 -> NONTERM_statementNoLabel 
    | 24 -> NONTERM_statementNoLabel 
    | 25 -> NONTERM_statementNoLabel 
    | 26 -> NONTERM_statementNoLabel 
    | 27 -> NONTERM_statementNoLabel 
    | 28 -> NONTERM_statementNoLabel 
    | 29 -> NONTERM_statementNoLabel 
    | 30 -> NONTERM_statementNoLabel 
    | 31 -> NONTERM_statementNoLabel 
    | 32 -> NONTERM_statementNoLabel 
    | 33 -> NONTERM_statementNoLabel 
    | 34 -> NONTERM_statementNoLabel 
    | 35 -> NONTERM_statementNoLabel 
    | 36 -> NONTERM_statementNoLabel 
    | 37 -> NONTERM_statementNoLabel 
    | 38 -> NONTERM_statementNoLabel 
    | 39 -> NONTERM_statementNoLabel 
    | 40 -> NONTERM_statementNoLabel 
    | 41 -> NONTERM_statementNoLabel 
    | 42 -> NONTERM_statementNoLabel 
    | 43 -> NONTERM_statementNoLabel 
    | 44 -> NONTERM_statementNoLabel 
    | 45 -> NONTERM_statementNoLabel 
    | 46 -> NONTERM_statementNoLabel 
    | 47 -> NONTERM_statementNoLabel 
    | 48 -> NONTERM_statementNoLabel 
    | 49 -> NONTERM_statementNoLabel 
    | 50 -> NONTERM_statementNoLabel 
    | 51 -> NONTERM_statementNoLabel 
    | 52 -> NONTERM_statementNoLabel 
    | 53 -> NONTERM_statementNoLabel 
    | 54 -> NONTERM_statementNoLabel 
    | 55 -> NONTERM_statementNoLabel 
    | 56 -> NONTERM_directives 
    | 57 -> NONTERM_directives 
    | 58 -> NONTERM_directives 
    | 59 -> NONTERM_directives 
    | 60 -> NONTERM_directives 
    | 61 -> NONTERM_directives 
    | 62 -> NONTERM_directives 
    | 63 -> NONTERM_directives 
    | 64 -> NONTERM_directives 
    | 65 -> NONTERM_directives 
    | 66 -> NONTERM_directives 
    | 67 -> NONTERM_directives 
    | 68 -> NONTERM_directives 
    | 69 -> NONTERM_directives 
    | 70 -> NONTERM_directives 
    | 71 -> NONTERM_directives 
    | 72 -> NONTERM_directives 
    | 73 -> NONTERM_directives 
    | 74 -> NONTERM_directives 
    | 75 -> NONTERM_directives 
    | 76 -> NONTERM_directives 
    | 77 -> NONTERM_directives 
    | 78 -> NONTERM_directives 
    | 79 -> NONTERM_directives 
    | 80 -> NONTERM_directives 
    | 81 -> NONTERM_directives 
    | 82 -> NONTERM_directives 
    | 83 -> NONTERM_argumentList 
    | 84 -> NONTERM_argumentList 
    | 85 -> NONTERM_argumentList 
    | 86 -> NONTERM_primaryExpression 
    | 87 -> NONTERM_primaryExpression 
    | 88 -> NONTERM_expression 
    | 89 -> NONTERM_additiveExpression 
    | 90 -> NONTERM_additiveExpression 
    | 91 -> NONTERM_additiveExpression 
    | 92 -> NONTERM_multiplicativeExpression 
    | 93 -> NONTERM_multiplicativeExpression 
    | 94 -> NONTERM_multiplicativeExpression 
    | 95 -> NONTERM_multiplicativeExpression 
    | 96 -> NONTERM_integerList 
    | 97 -> NONTERM_integerList 
    | 98 -> NONTERM_dataList 
    | 99 -> NONTERM_dataList 
    | 100 -> NONTERM_data 
    | 101 -> NONTERM_data 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 84 
let _fsyacc_tagOfErrorTerminal = 82

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | INTEGER _ -> "INTEGER" 
  | LABEL _ -> "LABEL" 
  | IDENTIFIER _ -> "IDENTIFIER" 
  | STRING _ -> "STRING" 
  | INVOKE_DIRECTIVE _ -> "INVOKE_DIRECTIVE" 
  | INCLUDE  -> "INCLUDE" 
  | SHIFTR_DIRECTIVE  -> "SHIFTR_DIRECTIVE" 
  | SHIFTL_DIRECTIVE  -> "SHIFTL_DIRECTIVE" 
  | XOR_DIRECTIVE  -> "XOR_DIRECTIVE" 
  | NOR_DIRECTIVE  -> "NOR_DIRECTIVE" 
  | INC_DIRECTIVE  -> "INC_DIRECTIVE" 
  | NWRITEB_DIRECTIVE  -> "NWRITEB_DIRECTIVE" 
  | NWRITEW_DIRECTIVE  -> "NWRITEW_DIRECTIVE" 
  | NWRITEDW_DIRECTIVE  -> "NWRITEDW_DIRECTIVE" 
  | NREADB_DIRECTIVE  -> "NREADB_DIRECTIVE" 
  | NREADW_DIRECTIVE  -> "NREADW_DIRECTIVE" 
  | NREADDW_DIRECTIVE  -> "NREADDW_DIRECTIVE" 
  | WRITEB_DIRECTIVE  -> "WRITEB_DIRECTIVE" 
  | WRITEW_DIRECTIVE  -> "WRITEW_DIRECTIVE" 
  | WRITEDW_DIRECTIVE  -> "WRITEDW_DIRECTIVE" 
  | READB_DIRECTIVE  -> "READB_DIRECTIVE" 
  | READW_DIRECTIVE  -> "READW_DIRECTIVE" 
  | READDW_DIRECTIVE  -> "READDW_DIRECTIVE" 
  | ADD_DIRECTIVE  -> "ADD_DIRECTIVE" 
  | SUB_DIRECTIVE  -> "SUB_DIRECTIVE" 
  | MUL_DIRECTIVE  -> "MUL_DIRECTIVE" 
  | DIV_DIRECTIVE  -> "DIV_DIRECTIVE" 
  | CMP_DIRECTIVE  -> "CMP_DIRECTIVE" 
  | AND_DIRECTIVE  -> "AND_DIRECTIVE" 
  | OR_DIRECTIVE  -> "OR_DIRECTIVE" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | JUMP_DIRECTIVE  -> "JUMP_DIRECTIVE" 
  | SET_DIRECTIVE  -> "SET_DIRECTIVE" 
  | PLUS_OP  -> "PLUS_OP" 
  | MINUS_OP  -> "MINUS_OP" 
  | MUL_OP  -> "MUL_OP" 
  | DIV_OP  -> "DIV_OP" 
  | DIV  -> "DIV" 
  | AND  -> "AND" 
  | SHIFTR  -> "SHIFTR" 
  | SHIFTL  -> "SHIFTL" 
  | OR  -> "OR" 
  | NOT  -> "NOT" 
  | XOR  -> "XOR" 
  | NOR  -> "NOR" 
  | SETIP  -> "SETIP" 
  | SETSP  -> "SETSP" 
  | INC  -> "INC" 
  | EOF  -> "EOF" 
  | CMP  -> "CMP" 
  | GETSP  -> "GETSP" 
  | SWRITE  -> "SWRITE" 
  | SREAD  -> "SREAD" 
  | BYTE  -> "BYTE" 
  | WORD  -> "WORD" 
  | DWORD  -> "DWORD" 
  | NEWLINE  -> "NEWLINE" 
  | COMMA  -> "COMMA" 
  | SUB  -> "SUB" 
  | MUL  -> "MUL" 
  | GETIP  -> "GETIP" 
  | RET  -> "RET" 
  | JUMP  -> "JUMP" 
  | JUMPIFL  -> "JUMPIFL" 
  | JUMPIFLE  -> "JUMPIFLE" 
  | JUMPIFG  -> "JUMPIFG" 
  | JUMPIFGE  -> "JUMPIFGE" 
  | ALLOCA  -> "ALLOCA" 
  | HALT  -> "HALT" 
  | PROC  -> "PROC" 
  | ENDP  -> "ENDP" 
  | PUSH  -> "PUSH" 
  | POP  -> "POP" 
  | ADD  -> "ADD" 
  | NOP  -> "NOP" 
  | CALL  -> "CALL" 
  | NCALL  -> "NCALL" 
  | WRITE  -> "WRITE" 
  | NWRITE  -> "NWRITE" 
  | READ  -> "READ" 
  | NREAD  -> "NREAD" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | INTEGER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LABEL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IDENTIFIER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INVOKE_DIRECTIVE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INCLUDE  -> (null : System.Object) 
  | SHIFTR_DIRECTIVE  -> (null : System.Object) 
  | SHIFTL_DIRECTIVE  -> (null : System.Object) 
  | XOR_DIRECTIVE  -> (null : System.Object) 
  | NOR_DIRECTIVE  -> (null : System.Object) 
  | INC_DIRECTIVE  -> (null : System.Object) 
  | NWRITEB_DIRECTIVE  -> (null : System.Object) 
  | NWRITEW_DIRECTIVE  -> (null : System.Object) 
  | NWRITEDW_DIRECTIVE  -> (null : System.Object) 
  | NREADB_DIRECTIVE  -> (null : System.Object) 
  | NREADW_DIRECTIVE  -> (null : System.Object) 
  | NREADDW_DIRECTIVE  -> (null : System.Object) 
  | WRITEB_DIRECTIVE  -> (null : System.Object) 
  | WRITEW_DIRECTIVE  -> (null : System.Object) 
  | WRITEDW_DIRECTIVE  -> (null : System.Object) 
  | READB_DIRECTIVE  -> (null : System.Object) 
  | READW_DIRECTIVE  -> (null : System.Object) 
  | READDW_DIRECTIVE  -> (null : System.Object) 
  | ADD_DIRECTIVE  -> (null : System.Object) 
  | SUB_DIRECTIVE  -> (null : System.Object) 
  | MUL_DIRECTIVE  -> (null : System.Object) 
  | DIV_DIRECTIVE  -> (null : System.Object) 
  | CMP_DIRECTIVE  -> (null : System.Object) 
  | AND_DIRECTIVE  -> (null : System.Object) 
  | OR_DIRECTIVE  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | JUMP_DIRECTIVE  -> (null : System.Object) 
  | SET_DIRECTIVE  -> (null : System.Object) 
  | PLUS_OP  -> (null : System.Object) 
  | MINUS_OP  -> (null : System.Object) 
  | MUL_OP  -> (null : System.Object) 
  | DIV_OP  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | SHIFTR  -> (null : System.Object) 
  | SHIFTL  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | XOR  -> (null : System.Object) 
  | NOR  -> (null : System.Object) 
  | SETIP  -> (null : System.Object) 
  | SETSP  -> (null : System.Object) 
  | INC  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | CMP  -> (null : System.Object) 
  | GETSP  -> (null : System.Object) 
  | SWRITE  -> (null : System.Object) 
  | SREAD  -> (null : System.Object) 
  | BYTE  -> (null : System.Object) 
  | WORD  -> (null : System.Object) 
  | DWORD  -> (null : System.Object) 
  | NEWLINE  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | SUB  -> (null : System.Object) 
  | MUL  -> (null : System.Object) 
  | GETIP  -> (null : System.Object) 
  | RET  -> (null : System.Object) 
  | JUMP  -> (null : System.Object) 
  | JUMPIFL  -> (null : System.Object) 
  | JUMPIFLE  -> (null : System.Object) 
  | JUMPIFG  -> (null : System.Object) 
  | JUMPIFGE  -> (null : System.Object) 
  | ALLOCA  -> (null : System.Object) 
  | HALT  -> (null : System.Object) 
  | PROC  -> (null : System.Object) 
  | ENDP  -> (null : System.Object) 
  | PUSH  -> (null : System.Object) 
  | POP  -> (null : System.Object) 
  | ADD  -> (null : System.Object) 
  | NOP  -> (null : System.Object) 
  | CALL  -> (null : System.Object) 
  | NCALL  -> (null : System.Object) 
  | WRITE  -> (null : System.Object) 
  | NWRITE  -> (null : System.Object) 
  | READ  -> (null : System.Object) 
  | NREAD  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 2us; 65535us; 0us; 6us; 2us; 7us; 2us; 65535us; 0us; 4us; 2us; 5us; 1us; 65535us; 14us; 15us; 2us; 65535us; 11us; 12us; 16us; 17us; 4us; 65535us; 11us; 22us; 12us; 23us; 16us; 22us; 17us; 23us; 5us; 65535us; 11us; 26us; 12us; 26us; 16us; 26us; 17us; 26us; 24us; 25us; 5us; 65535us; 11us; 71us; 12us; 71us; 16us; 71us; 17us; 71us; 24us; 71us; 1us; 65535us; 75us; 76us; 50us; 65535us; 30us; 31us; 72us; 73us; 75us; 163us; 79us; 174us; 81us; 82us; 83us; 84us; 85us; 86us; 87us; 88us; 89us; 90us; 91us; 92us; 93us; 94us; 95us; 96us; 97us; 98us; 99us; 100us; 101us; 102us; 103us; 104us; 105us; 106us; 107us; 108us; 109us; 110us; 111us; 112us; 113us; 114us; 115us; 116us; 117us; 118us; 119us; 120us; 121us; 122us; 123us; 124us; 125us; 126us; 127us; 128us; 129us; 130us; 131us; 132us; 133us; 134us; 135us; 136us; 137us; 138us; 139us; 140us; 141us; 142us; 143us; 144us; 145us; 146us; 147us; 148us; 149us; 150us; 151us; 152us; 153us; 154us; 155us; 156us; 157us; 158us; 159us; 160us; 164us; 165us; 170us; 174us; 172us; 174us; 175us; 176us; 177us; 178us; 179us; 174us; 2us; 65535us; 79us; 80us; 179us; 180us; 2us; 65535us; 79us; 168us; 179us; 168us; 4us; 65535us; 79us; 169us; 170us; 171us; 172us; 173us; 179us; 169us; 2us; 65535us; 67us; 68us; 69us; 70us; 1us; 65535us; 65us; 66us; 2us; 65535us; 65us; 187us; 185us; 186us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 8us; 11us; 13us; 16us; 21us; 27us; 33us; 35us; 86us; 89us; 92us; 97us; 100us; 102us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 3us; 1us; 3us; 5us; 1us; 1us; 1us; 2us; 1us; 3us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 6us; 2us; 7us; 8us; 2us; 7us; 8us; 2us; 7us; 13us; 1us; 7us; 1us; 8us; 2us; 8us; 11us; 1us; 8us; 2us; 8us; 13us; 1us; 8us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 19us; 1us; 20us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 1us; 26us; 1us; 27us; 1us; 28us; 1us; 29us; 1us; 30us; 1us; 31us; 1us; 32us; 1us; 33us; 1us; 34us; 1us; 35us; 1us; 36us; 1us; 37us; 1us; 38us; 1us; 39us; 1us; 40us; 1us; 41us; 1us; 42us; 1us; 43us; 1us; 44us; 1us; 45us; 1us; 46us; 1us; 47us; 1us; 48us; 1us; 49us; 1us; 50us; 1us; 51us; 1us; 52us; 2us; 52us; 98us; 1us; 53us; 2us; 53us; 96us; 1us; 54us; 2us; 54us; 96us; 1us; 55us; 1us; 56us; 1us; 56us; 1us; 57us; 1us; 57us; 2us; 57us; 85us; 1us; 57us; 1us; 58us; 1us; 58us; 1us; 58us; 1us; 59us; 1us; 59us; 1us; 59us; 1us; 59us; 1us; 60us; 1us; 60us; 1us; 60us; 1us; 60us; 1us; 61us; 1us; 61us; 1us; 61us; 1us; 61us; 1us; 62us; 1us; 62us; 1us; 62us; 1us; 62us; 1us; 63us; 1us; 63us; 1us; 63us; 1us; 63us; 1us; 64us; 1us; 64us; 1us; 64us; 1us; 64us; 1us; 65us; 1us; 65us; 1us; 65us; 1us; 65us; 1us; 66us; 1us; 66us; 1us; 66us; 1us; 66us; 1us; 67us; 1us; 67us; 1us; 67us; 1us; 67us; 1us; 68us; 1us; 68us; 1us; 68us; 1us; 68us; 1us; 69us; 1us; 69us; 1us; 69us; 1us; 69us; 1us; 70us; 1us; 70us; 1us; 71us; 1us; 71us; 1us; 72us; 1us; 72us; 1us; 73us; 1us; 73us; 1us; 74us; 1us; 74us; 1us; 75us; 1us; 75us; 1us; 76us; 1us; 76us; 1us; 76us; 1us; 76us; 1us; 77us; 1us; 77us; 1us; 77us; 1us; 77us; 1us; 78us; 1us; 78us; 1us; 78us; 1us; 78us; 1us; 79us; 1us; 79us; 1us; 79us; 1us; 79us; 1us; 80us; 1us; 80us; 1us; 80us; 1us; 80us; 1us; 81us; 1us; 81us; 1us; 81us; 1us; 81us; 1us; 82us; 1us; 82us; 1us; 84us; 1us; 85us; 1us; 85us; 1us; 86us; 1us; 87us; 3us; 88us; 90us; 91us; 3us; 89us; 93us; 94us; 1us; 90us; 3us; 90us; 93us; 94us; 1us; 91us; 3us; 91us; 93us; 94us; 1us; 92us; 1us; 93us; 1us; 93us; 1us; 94us; 1us; 94us; 1us; 95us; 1us; 95us; 1us; 95us; 1us; 96us; 1us; 96us; 1us; 97us; 1us; 98us; 1us; 98us; 1us; 99us; 1us; 100us; 1us; 101us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 8us; 10us; 12us; 14us; 16us; 18us; 20us; 22us; 25us; 28us; 31us; 33us; 35us; 38us; 40us; 43us; 45us; 47us; 49us; 51us; 53us; 55us; 57us; 59us; 61us; 63us; 65us; 67us; 69us; 71us; 73us; 75us; 77us; 79us; 81us; 83us; 85us; 87us; 89us; 91us; 93us; 95us; 97us; 99us; 101us; 103us; 105us; 107us; 109us; 111us; 113us; 115us; 117us; 119us; 121us; 123us; 125us; 127us; 129us; 131us; 133us; 135us; 137us; 139us; 142us; 144us; 147us; 149us; 152us; 154us; 156us; 158us; 160us; 162us; 165us; 167us; 169us; 171us; 173us; 175us; 177us; 179us; 181us; 183us; 185us; 187us; 189us; 191us; 193us; 195us; 197us; 199us; 201us; 203us; 205us; 207us; 209us; 211us; 213us; 215us; 217us; 219us; 221us; 223us; 225us; 227us; 229us; 231us; 233us; 235us; 237us; 239us; 241us; 243us; 245us; 247us; 249us; 251us; 253us; 255us; 257us; 259us; 261us; 263us; 265us; 267us; 269us; 271us; 273us; 275us; 277us; 279us; 281us; 283us; 285us; 287us; 289us; 291us; 293us; 295us; 297us; 299us; 301us; 303us; 305us; 307us; 309us; 311us; 313us; 315us; 317us; 319us; 321us; 323us; 325us; 327us; 329us; 331us; 333us; 335us; 337us; 339us; 341us; 343us; 345us; 347us; 351us; 355us; 357us; 361us; 363us; 367us; 369us; 371us; 373us; 375us; 377us; 379us; 381us; 383us; 385us; 387us; 389us; 391us; 393us; 395us; 397us; |]
let _fsyacc_action_rows = 190
let _fsyacc_actionTableElements = [|2us; 32768us; 5us; 8us; 70us; 10us; 0us; 49152us; 3us; 32768us; 5us; 8us; 49us; 3us; 70us; 10us; 0us; 16385us; 0us; 16386us; 0us; 16387us; 0us; 16388us; 0us; 16389us; 1us; 32768us; 3us; 9us; 0us; 16390us; 1us; 32768us; 2us; 11us; 68us; 32768us; 1us; 24us; 4us; 74us; 6us; 109us; 7us; 113us; 8us; 117us; 9us; 121us; 10us; 161us; 11us; 149us; 12us; 153us; 13us; 157us; 14us; 131us; 15us; 133us; 16us; 135us; 17us; 137us; 18us; 141us; 19us; 145us; 20us; 125us; 21us; 127us; 22us; 129us; 23us; 81us; 24us; 85us; 25us; 89us; 26us; 93us; 27us; 97us; 28us; 101us; 29us; 105us; 30us; 14us; 32us; 72us; 33us; 78us; 38us; 55us; 39us; 56us; 40us; 61us; 41us; 62us; 42us; 57us; 43us; 58us; 44us; 59us; 45us; 60us; 46us; 63us; 47us; 64us; 48us; 34us; 50us; 45us; 51us; 50us; 52us; 51us; 53us; 52us; 54us; 65us; 55us; 67us; 56us; 69us; 59us; 53us; 60us; 54us; 61us; 46us; 62us; 27us; 63us; 35us; 64us; 36us; 65us; 37us; 66us; 38us; 67us; 39us; 68us; 44us; 69us; 47us; 72us; 30us; 73us; 32us; 74us; 29us; 75us; 28us; 76us; 48us; 77us; 49us; 78us; 42us; 79us; 43us; 80us; 40us; 81us; 41us; 68us; 32768us; 1us; 24us; 4us; 74us; 6us; 109us; 7us; 113us; 8us; 117us; 9us; 121us; 10us; 161us; 11us; 149us; 12us; 153us; 13us; 157us; 14us; 131us; 15us; 133us; 16us; 135us; 17us; 137us; 18us; 141us; 19us; 145us; 20us; 125us; 21us; 127us; 22us; 129us; 23us; 81us; 24us; 85us; 25us; 89us; 26us; 93us; 27us; 97us; 28us; 101us; 29us; 105us; 32us; 72us; 33us; 78us; 38us; 55us; 39us; 56us; 40us; 61us; 41us; 62us; 42us; 57us; 43us; 58us; 44us; 59us; 45us; 60us; 46us; 63us; 47us; 64us; 48us; 34us; 50us; 45us; 51us; 50us; 52us; 51us; 53us; 52us; 54us; 65us; 55us; 67us; 56us; 69us; 59us; 53us; 60us; 54us; 61us; 46us; 62us; 27us; 63us; 35us; 64us; 36us; 65us; 37us; 66us; 38us; 67us; 39us; 68us; 44us; 69us; 47us; 71us; 13us; 72us; 30us; 73us; 32us; 74us; 29us; 75us; 28us; 76us; 48us; 77us; 49us; 78us; 42us; 79us; 43us; 80us; 40us; 81us; 41us; 0us; 16391us; 1us; 16393us; 2us; 19us; 2us; 32768us; 31us; 16us; 58us; 20us; 67us; 32768us; 1us; 24us; 4us; 74us; 6us; 109us; 7us; 113us; 8us; 117us; 9us; 121us; 10us; 161us; 11us; 149us; 12us; 153us; 13us; 157us; 14us; 131us; 15us; 133us; 16us; 135us; 17us; 137us; 18us; 141us; 19us; 145us; 20us; 125us; 21us; 127us; 22us; 129us; 23us; 81us; 24us; 85us; 25us; 89us; 26us; 93us; 27us; 97us; 28us; 101us; 29us; 105us; 32us; 72us; 33us; 78us; 38us; 55us; 39us; 56us; 40us; 61us; 41us; 62us; 42us; 57us; 43us; 58us; 44us; 59us; 45us; 60us; 46us; 63us; 47us; 64us; 48us; 34us; 50us; 45us; 51us; 50us; 52us; 51us; 53us; 52us; 54us; 65us; 55us; 67us; 56us; 69us; 59us; 53us; 60us; 54us; 61us; 46us; 62us; 27us; 63us; 35us; 64us; 36us; 65us; 37us; 66us; 38us; 67us; 39us; 68us; 44us; 69us; 47us; 72us; 30us; 73us; 32us; 74us; 29us; 75us; 28us; 76us; 48us; 77us; 49us; 78us; 42us; 79us; 43us; 80us; 40us; 81us; 41us; 68us; 32768us; 1us; 24us; 4us; 74us; 6us; 109us; 7us; 113us; 8us; 117us; 9us; 121us; 10us; 161us; 11us; 149us; 12us; 153us; 13us; 157us; 14us; 131us; 15us; 133us; 16us; 135us; 17us; 137us; 18us; 141us; 19us; 145us; 20us; 125us; 21us; 127us; 22us; 129us; 23us; 81us; 24us; 85us; 25us; 89us; 26us; 93us; 27us; 97us; 28us; 101us; 29us; 105us; 32us; 72us; 33us; 78us; 38us; 55us; 39us; 56us; 40us; 61us; 41us; 62us; 42us; 57us; 43us; 58us; 44us; 59us; 45us; 60us; 46us; 63us; 47us; 64us; 48us; 34us; 50us; 45us; 51us; 50us; 52us; 51us; 53us; 52us; 54us; 65us; 55us; 67us; 56us; 69us; 59us; 53us; 60us; 54us; 61us; 46us; 62us; 27us; 63us; 35us; 64us; 36us; 65us; 37us; 66us; 38us; 67us; 39us; 68us; 44us; 69us; 47us; 71us; 18us; 72us; 30us; 73us; 32us; 74us; 29us; 75us; 28us; 76us; 48us; 77us; 49us; 78us; 42us; 79us; 43us; 80us; 40us; 81us; 41us; 0us; 16392us; 0us; 16394us; 1us; 32768us; 2us; 21us; 0us; 16395us; 0us; 16396us; 0us; 16397us; 66us; 32768us; 4us; 74us; 6us; 109us; 7us; 113us; 8us; 117us; 9us; 121us; 10us; 161us; 11us; 149us; 12us; 153us; 13us; 157us; 14us; 131us; 15us; 133us; 16us; 135us; 17us; 137us; 18us; 141us; 19us; 145us; 20us; 125us; 21us; 127us; 22us; 129us; 23us; 81us; 24us; 85us; 25us; 89us; 26us; 93us; 27us; 97us; 28us; 101us; 29us; 105us; 32us; 72us; 33us; 78us; 38us; 55us; 39us; 56us; 40us; 61us; 41us; 62us; 42us; 57us; 43us; 58us; 44us; 59us; 45us; 60us; 46us; 63us; 47us; 64us; 48us; 34us; 50us; 45us; 51us; 50us; 52us; 51us; 53us; 52us; 54us; 65us; 55us; 67us; 56us; 69us; 59us; 53us; 60us; 54us; 61us; 46us; 62us; 27us; 63us; 35us; 64us; 36us; 65us; 37us; 66us; 38us; 67us; 39us; 68us; 44us; 69us; 47us; 72us; 30us; 73us; 32us; 74us; 29us; 75us; 28us; 76us; 48us; 77us; 49us; 78us; 42us; 79us; 43us; 80us; 40us; 81us; 41us; 0us; 16398us; 0us; 16399us; 0us; 16400us; 0us; 16401us; 0us; 16402us; 2us; 32768us; 0us; 166us; 2us; 167us; 0us; 16403us; 1us; 32768us; 2us; 33us; 0us; 16404us; 0us; 16405us; 0us; 16406us; 0us; 16407us; 0us; 16408us; 0us; 16409us; 0us; 16410us; 0us; 16411us; 0us; 16412us; 0us; 16413us; 0us; 16414us; 0us; 16415us; 0us; 16416us; 0us; 16417us; 0us; 16418us; 0us; 16419us; 0us; 16420us; 0us; 16421us; 0us; 16422us; 0us; 16423us; 0us; 16424us; 0us; 16425us; 0us; 16426us; 0us; 16427us; 0us; 16428us; 0us; 16429us; 0us; 16430us; 0us; 16431us; 0us; 16432us; 0us; 16433us; 0us; 16434us; 0us; 16435us; 2us; 32768us; 0us; 188us; 3us; 189us; 1us; 16436us; 58us; 185us; 1us; 32768us; 0us; 184us; 1us; 16437us; 58us; 182us; 1us; 32768us; 0us; 184us; 1us; 16438us; 58us; 182us; 0us; 16439us; 2us; 32768us; 0us; 166us; 2us; 167us; 0us; 16440us; 1us; 32768us; 30us; 75us; 2us; 16467us; 0us; 166us; 2us; 167us; 2us; 32768us; 31us; 77us; 58us; 164us; 0us; 16441us; 1us; 32768us; 2us; 79us; 3us; 32768us; 0us; 166us; 2us; 167us; 30us; 179us; 0us; 16442us; 2us; 32768us; 0us; 166us; 2us; 167us; 1us; 32768us; 58us; 83us; 2us; 32768us; 0us; 166us; 2us; 167us; 0us; 16443us; 2us; 32768us; 0us; 166us; 2us; 167us; 1us; 32768us; 58us; 87us; 2us; 32768us; 0us; 166us; 2us; 167us; 0us; 16444us; 2us; 32768us; 0us; 166us; 2us; 167us; 1us; 32768us; 58us; 91us; 2us; 32768us; 0us; 166us; 2us; 167us; 0us; 16445us; 2us; 32768us; 0us; 166us; 2us; 167us; 1us; 32768us; 58us; 95us; 2us; 32768us; 0us; 166us; 2us; 167us; 0us; 16446us; 2us; 32768us; 0us; 166us; 2us; 167us; 1us; 32768us; 58us; 99us; 2us; 32768us; 0us; 166us; 2us; 167us; 0us; 16447us; 2us; 32768us; 0us; 166us; 2us; 167us; 1us; 32768us; 58us; 103us; 2us; 32768us; 0us; 166us; 2us; 167us; 0us; 16448us; 2us; 32768us; 0us; 166us; 2us; 167us; 1us; 32768us; 58us; 107us; 2us; 32768us; 0us; 166us; 2us; 167us; 0us; 16449us; 2us; 32768us; 0us; 166us; 2us; 167us; 1us; 32768us; 58us; 111us; 2us; 32768us; 0us; 166us; 2us; 167us; 0us; 16450us; 2us; 32768us; 0us; 166us; 2us; 167us; 1us; 32768us; 58us; 115us; 2us; 32768us; 0us; 166us; 2us; 167us; 0us; 16451us; 2us; 32768us; 0us; 166us; 2us; 167us; 1us; 32768us; 58us; 119us; 2us; 32768us; 0us; 166us; 2us; 167us; 0us; 16452us; 2us; 32768us; 0us; 166us; 2us; 167us; 1us; 32768us; 58us; 123us; 2us; 32768us; 0us; 166us; 2us; 167us; 0us; 16453us; 2us; 32768us; 0us; 166us; 2us; 167us; 0us; 16454us; 2us; 32768us; 0us; 166us; 2us; 167us; 0us; 16455us; 2us; 32768us; 0us; 166us; 2us; 167us; 0us; 16456us; 2us; 32768us; 0us; 166us; 2us; 167us; 0us; 16457us; 2us; 32768us; 0us; 166us; 2us; 167us; 0us; 16458us; 2us; 32768us; 0us; 166us; 2us; 167us; 0us; 16459us; 2us; 32768us; 0us; 166us; 2us; 167us; 1us; 32768us; 58us; 139us; 2us; 32768us; 0us; 166us; 2us; 167us; 0us; 16460us; 2us; 32768us; 0us; 166us; 2us; 167us; 1us; 32768us; 58us; 143us; 2us; 32768us; 0us; 166us; 2us; 167us; 0us; 16461us; 2us; 32768us; 0us; 166us; 2us; 167us; 1us; 32768us; 58us; 147us; 2us; 32768us; 0us; 166us; 2us; 167us; 0us; 16462us; 2us; 32768us; 0us; 166us; 2us; 167us; 1us; 32768us; 58us; 151us; 2us; 32768us; 0us; 166us; 2us; 167us; 0us; 16463us; 2us; 32768us; 0us; 166us; 2us; 167us; 1us; 32768us; 58us; 155us; 2us; 32768us; 0us; 166us; 2us; 167us; 0us; 16464us; 2us; 32768us; 0us; 166us; 2us; 167us; 1us; 32768us; 58us; 159us; 2us; 32768us; 0us; 166us; 2us; 167us; 0us; 16465us; 1us; 32768us; 2us; 162us; 0us; 16466us; 0us; 16468us; 2us; 32768us; 0us; 166us; 2us; 167us; 0us; 16469us; 0us; 16470us; 0us; 16471us; 2us; 16472us; 34us; 170us; 35us; 172us; 2us; 16473us; 36us; 175us; 37us; 177us; 3us; 32768us; 0us; 166us; 2us; 167us; 30us; 179us; 2us; 16474us; 36us; 175us; 37us; 177us; 3us; 32768us; 0us; 166us; 2us; 167us; 30us; 179us; 2us; 16475us; 36us; 175us; 37us; 177us; 0us; 16476us; 2us; 32768us; 0us; 166us; 2us; 167us; 0us; 16477us; 2us; 32768us; 0us; 166us; 2us; 167us; 0us; 16478us; 3us; 32768us; 0us; 166us; 2us; 167us; 30us; 179us; 1us; 32768us; 31us; 181us; 0us; 16479us; 1us; 32768us; 0us; 183us; 0us; 16480us; 0us; 16481us; 2us; 32768us; 0us; 188us; 3us; 189us; 0us; 16482us; 0us; 16483us; 0us; 16484us; 0us; 16485us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 3us; 4us; 8us; 9us; 10us; 11us; 12us; 13us; 15us; 16us; 18us; 87us; 156us; 157us; 159us; 162us; 230us; 299us; 300us; 301us; 303us; 304us; 305us; 306us; 373us; 374us; 375us; 376us; 377us; 378us; 381us; 382us; 384us; 385us; 386us; 387us; 388us; 389us; 390us; 391us; 392us; 393us; 394us; 395us; 396us; 397us; 398us; 399us; 400us; 401us; 402us; 403us; 404us; 405us; 406us; 407us; 408us; 409us; 410us; 411us; 412us; 413us; 414us; 415us; 416us; 419us; 421us; 423us; 425us; 427us; 429us; 430us; 433us; 434us; 436us; 439us; 442us; 443us; 445us; 449us; 450us; 453us; 455us; 458us; 459us; 462us; 464us; 467us; 468us; 471us; 473us; 476us; 477us; 480us; 482us; 485us; 486us; 489us; 491us; 494us; 495us; 498us; 500us; 503us; 504us; 507us; 509us; 512us; 513us; 516us; 518us; 521us; 522us; 525us; 527us; 530us; 531us; 534us; 536us; 539us; 540us; 543us; 545us; 548us; 549us; 552us; 553us; 556us; 557us; 560us; 561us; 564us; 565us; 568us; 569us; 572us; 573us; 576us; 578us; 581us; 582us; 585us; 587us; 590us; 591us; 594us; 596us; 599us; 600us; 603us; 605us; 608us; 609us; 612us; 614us; 617us; 618us; 621us; 623us; 626us; 627us; 629us; 630us; 631us; 634us; 635us; 636us; 637us; 640us; 643us; 647us; 650us; 654us; 657us; 658us; 661us; 662us; 665us; 666us; 670us; 672us; 673us; 675us; 676us; 677us; 680us; 681us; 682us; 683us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 2us; 1us; 2us; 2us; 4us; 7us; 0us; 1us; 3us; 1us; 2us; 2us; 1us; 1us; 1us; 1us; 2us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 2us; 1us; 2us; 4us; 3us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 2us; 2us; 2us; 2us; 2us; 2us; 4us; 4us; 4us; 4us; 4us; 4us; 2us; 0us; 1us; 3us; 1us; 1us; 1us; 1us; 3us; 3us; 1us; 3us; 3us; 3us; 3us; 1us; 3us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 3us; 4us; 4us; 5us; 5us; 5us; 6us; 6us; 7us; 7us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 10us; 10us; 10us; 11us; 11us; 12us; 13us; 13us; 13us; 14us; 14us; 14us; 14us; 15us; 15us; 16us; 16us; 17us; 17us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 16387us; 16388us; 16389us; 65535us; 16390us; 65535us; 65535us; 65535us; 16391us; 65535us; 65535us; 65535us; 65535us; 16392us; 16394us; 65535us; 16395us; 16396us; 16397us; 65535us; 16398us; 16399us; 16400us; 16401us; 16402us; 65535us; 16403us; 65535us; 16404us; 16405us; 16406us; 16407us; 16408us; 16409us; 16410us; 16411us; 16412us; 16413us; 16414us; 16415us; 16416us; 16417us; 16418us; 16419us; 16420us; 16421us; 16422us; 16423us; 16424us; 16425us; 16426us; 16427us; 16428us; 16429us; 16430us; 16431us; 16432us; 16433us; 16434us; 16435us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16439us; 65535us; 16440us; 65535us; 65535us; 65535us; 16441us; 65535us; 65535us; 16442us; 65535us; 65535us; 65535us; 16443us; 65535us; 65535us; 65535us; 16444us; 65535us; 65535us; 65535us; 16445us; 65535us; 65535us; 65535us; 16446us; 65535us; 65535us; 65535us; 16447us; 65535us; 65535us; 65535us; 16448us; 65535us; 65535us; 65535us; 16449us; 65535us; 65535us; 65535us; 16450us; 65535us; 65535us; 65535us; 16451us; 65535us; 65535us; 65535us; 16452us; 65535us; 65535us; 65535us; 16453us; 65535us; 16454us; 65535us; 16455us; 65535us; 16456us; 65535us; 16457us; 65535us; 16458us; 65535us; 16459us; 65535us; 65535us; 65535us; 16460us; 65535us; 65535us; 65535us; 16461us; 65535us; 65535us; 65535us; 16462us; 65535us; 65535us; 65535us; 16463us; 65535us; 65535us; 65535us; 16464us; 65535us; 65535us; 65535us; 16465us; 65535us; 16466us; 16468us; 65535us; 16469us; 16470us; 16471us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16476us; 65535us; 16477us; 65535us; 16478us; 65535us; 65535us; 16479us; 65535us; 16480us; 16481us; 65535us; 16482us; 16483us; 16484us; 16485us; |]
let _fsyacc_reductions ()  =    [| 
# 673 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  Program )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startprogram));
# 682 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'sourceElementList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                   Program (List.rev _1) 
                   )
# 36 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 :  Program ));
# 693 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'procDefinition)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                          [_1] 
                   )
# 39 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'sourceElementList));
# 704 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'sourceElementList)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'procDefinition)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                        _2::_1 
                   )
# 40 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'sourceElementList));
# 716 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'globalStatement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                           [_1] 
                   )
# 41 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'sourceElementList));
# 727 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'sourceElementList)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'globalStatement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                         _2::_1 
                   )
# 42 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'sourceElementList));
# 739 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                          includeFile(_2) 
                   )
# 45 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'globalStatement));
# 750 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'statementList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                         procedureDefinition(_2, List.rev _3) 
                   )
# 48 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'procDefinition));
# 762 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'parameterList)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'statementList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                                              procedureDefinitionWithArguments(_2, List.rev _4, List.rev _6) 
                   )
# 49 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'procDefinition));
# 775 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                               List.empty 
                   )
# 52 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'parameterList));
# 785 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                       [_1] 
                   )
# 53 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'parameterList));
# 796 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'parameterList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                      _3::_1 
                   )
# 54 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'parameterList));
# 808 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                       [_1] 
                   )
# 57 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementList));
# 819 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'statementList)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                 _2::_1 
                   )
# 58 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementList));
# 831 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'statementNoLabel)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                label(_1, _2) 
                   )
# 61 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statement));
# 843 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'statementNoLabel)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                            _1 
                   )
# 62 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statement));
# 854 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                  ret() 
                   )
# 65 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 864 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                  nop() 
                   )
# 66 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 874 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                  add() 
                   )
# 67 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 884 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                push(_2) 
                   )
# 68 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 895 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                          pop(_2) 
                   )
# 69 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 906 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                  inc() 
                   )
# 70 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 916 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                   jump() 
                   )
# 71 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 926 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                     jumpIf(false, true) 
                   )
# 72 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 936 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                      jumpIf(true, true) 
                   )
# 73 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 946 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                     jumpIf(false, false) 
                   )
# 74 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 956 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                      jumpIf(true, false) 
                   )
# 75 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 966 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                   read() 
                   )
# 76 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 976 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                    readNative() 
                   )
# 77 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 986 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                    write() 
                   )
# 78 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 996 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                    writeNative() 
                   )
# 79 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 1006 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                    alloca() 
                   )
# 80 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 1016 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                  compare() 
                   )
# 81 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 1026 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                    getIp() 
                   )
# 82 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 1036 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                   halt() 
                   )
# 83 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 1046 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                   call() 
                   )
# 84 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 1056 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                    callNative() 
                   )
# 85 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 1066 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                    getSp() 
                   )
# 86 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 1076 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                    stackWrite() 
                   )
# 87 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 1086 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                    stackRead() 
                   )
# 88 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 1096 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                  sub() 
                   )
# 89 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 1106 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                  mul() 
                   )
# 90 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 1116 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                  div() 
                   )
# 91 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 1126 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                  bitAnd() 
                   )
# 92 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 1136 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                 bitOr() 
                   )
# 93 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 1146 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                  bitNot() 
                   )
# 94 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 1156 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                  xor() 
                   )
# 95 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 1166 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                  nor() 
                   )
# 96 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 1176 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                    shiftRight() 
                   )
# 97 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 1186 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                    shiftLeft() 
                   )
# 98 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 1196 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                    setIp() 
                   )
# 99 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 1206 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                    setSp() 
                   )
# 100 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 1216 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'dataList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                          memoryByte(List.rev _2) 
                   )
# 101 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 1227 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'integerList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                            memoryWord(List.rev _2) 
                   )
# 102 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 1238 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'integerList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                             memoryDword(List.rev _2) 
                   )
# 103 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 1249 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'directives)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                       _1 
                   )
# 104 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 1260 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                        jumpDirective(_2) 
                   )
# 107 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'directives));
# 1271 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                                invoke(_1, List.rev _3) 
                   )
# 108 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'directives));
# 1283 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                          setLocalVariable(_2, _3) 
                   )
# 109 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'directives));
# 1295 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                                         addDirective(_2, _4) 
                   )
# 110 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'directives));
# 1307 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                                         subDirective(_2, _4) 
                   )
# 111 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'directives));
# 1319 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                                         mulDirective(_2, _4) 
                   )
# 112 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'directives));
# 1331 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                                         divDirective(_2, _4) 
                   )
# 113 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'directives));
# 1343 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                                         cmpDirective(_2, _4) 
                   )
# 114 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'directives));
# 1355 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                                         andDirective(_2, _4) 
                   )
# 115 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'directives));
# 1367 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                                        orDirective(_2, _4) 
                   )
# 116 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'directives));
# 1379 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                                           shiftrDirective(_2, _4) 
                   )
# 117 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'directives));
# 1391 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                                           shiftlDirective(_2, _4) 
                   )
# 118 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'directives));
# 1403 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                                         xorDirective(_2, _4) 
                   )
# 119 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'directives));
# 1415 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                                         norDirective(_2, _4) 
                   )
# 120 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'directives));
# 1427 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                         readByteDirective(_2) 
                   )
# 121 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'directives));
# 1438 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                         readWordDirective(_2) 
                   )
# 122 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'directives));
# 1449 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                         readDoubleWordDirective(_2) 
                   )
# 123 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'directives));
# 1460 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                         nativeReadByteDirective(_2) 
                   )
# 124 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'directives));
# 1471 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                         nativeReadWordDirective(_2) 
                   )
# 125 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'directives));
# 1482 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                          nativeReadDoubleWordDirective(_2) 
                   )
# 126 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'directives));
# 1493 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                                           writeByteDirective(_4, _2) 
                   )
# 127 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'directives));
# 1505 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                                           writeWordDirective(_4, _2) 
                   )
# 128 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'directives));
# 1517 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                                            writeDoubleWordDirective(_4, _2) 
                   )
# 129 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'directives));
# 1529 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                                            nativeWriteByteDirective(_4, _2) 
                   )
# 130 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'directives));
# 1541 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                                            nativeWriteWordDirective(_4, _2) 
                   )
# 131 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'directives));
# 1553 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                                             nativeWriteDoubleWordDirective(_4, _2) 
                   )
# 132 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'directives));
# 1565 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                  incDirective(_2) 
                   )
# 133 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'directives));
# 1576 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                               List.empty 
                   )
# 136 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'argumentList));
# 1586 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                             [_1] 
                   )
# 137 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'argumentList));
# 1597 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                           _3::_1 
                   )
# 138 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'argumentList));
# 1609 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                     number(_1) 
                   )
# 141 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'primaryExpression));
# 1620 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                       identifier(_1) 
                   )
# 142 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'primaryExpression));
# 1631 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'additiveExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                             _1 
                   )
# 145 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'expression));
# 1642 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'multiplicativeExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                     _1 
                   )
# 148 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'additiveExpression));
# 1653 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'additiveExpression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'multiplicativeExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                                         addDirectiveExpression(_1, _3) 
                   )
# 149 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'additiveExpression));
# 1665 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'additiveExpression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'multiplicativeExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                                          subDirectiveExpression(_1, _3) 
                   )
# 150 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'additiveExpression));
# 1677 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                _1 
                   )
# 153 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'multiplicativeExpression));
# 1688 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'multiplicativeExpression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                                        mulDirectiveExpression(_1, _3) 
                   )
# 154 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'multiplicativeExpression));
# 1700 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'multiplicativeExpression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'primaryExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                                        divDirectiveExpression(_1, _3) 
                   )
# 155 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'multiplicativeExpression));
# 1712 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                  _2 
                   )
# 156 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'multiplicativeExpression));
# 1723 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'integerList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                   _3::_1 
                   )
# 159 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'integerList));
# 1735 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                     [_1] 
                   )
# 160 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'integerList));
# 1746 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'dataList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'data)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                              _3::_1 
                   )
# 163 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'dataList));
# 1758 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'data)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                   [_1] 
                   )
# 164 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'dataList));
# 1769 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                     [_1] 
                   )
# 167 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'data));
# 1780 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                    getStringBytes(_1) 
                   )
# 168 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'data));
|]
# 1792 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 85;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let program lexer lexbuf :  Program  =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
