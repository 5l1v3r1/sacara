// Implementation file for parser generated by fsyacc
module ES.Sacara.Ir.Parser.SacaraIrParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"


open System
open ES.Sacara.Ir.Parser.IrAst
open ES.Sacara.Ir.Parser.IrParserUtility


# 14 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | INTEGER of (int32)
  | LABEL of (string)
  | IDENTIFIER of (string)
  | STRING of (string)
  | DIV
  | AND
  | SHIFTR
  | SHIFTL
  | OR
  | NOT
  | XOR
  | NOR
  | SETIP
  | SETSP
  | INC
  | EOF
  | CMP
  | GETSP
  | SWRITE
  | SREAD
  | BYTE
  | WORD
  | DWORD
  | NEWLINE
  | COMMA
  | SUB
  | MUL
  | GETIP
  | RET
  | JUMP
  | JUMPIFL
  | JUMPIFLE
  | JUMPIFG
  | JUMPIFGE
  | ALLOCA
  | HALT
  | PROC
  | ENDP
  | PUSH
  | POP
  | ADD
  | NOP
  | CALL
  | NCALL
  | WRITE
  | NWRITE
  | READ
  | NREAD
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_INTEGER
    | TOKEN_LABEL
    | TOKEN_IDENTIFIER
    | TOKEN_STRING
    | TOKEN_DIV
    | TOKEN_AND
    | TOKEN_SHIFTR
    | TOKEN_SHIFTL
    | TOKEN_OR
    | TOKEN_NOT
    | TOKEN_XOR
    | TOKEN_NOR
    | TOKEN_SETIP
    | TOKEN_SETSP
    | TOKEN_INC
    | TOKEN_EOF
    | TOKEN_CMP
    | TOKEN_GETSP
    | TOKEN_SWRITE
    | TOKEN_SREAD
    | TOKEN_BYTE
    | TOKEN_WORD
    | TOKEN_DWORD
    | TOKEN_NEWLINE
    | TOKEN_COMMA
    | TOKEN_SUB
    | TOKEN_MUL
    | TOKEN_GETIP
    | TOKEN_RET
    | TOKEN_JUMP
    | TOKEN_JUMPIFL
    | TOKEN_JUMPIFLE
    | TOKEN_JUMPIFG
    | TOKEN_JUMPIFGE
    | TOKEN_ALLOCA
    | TOKEN_HALT
    | TOKEN_PROC
    | TOKEN_ENDP
    | TOKEN_PUSH
    | TOKEN_POP
    | TOKEN_ADD
    | TOKEN_NOP
    | TOKEN_CALL
    | TOKEN_NCALL
    | TOKEN_WRITE
    | TOKEN_NWRITE
    | TOKEN_READ
    | TOKEN_NREAD
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startprogram
    | NONTERM_program
    | NONTERM_sourceElementList
    | NONTERM_procDefinition
    | NONTERM_statementList
    | NONTERM_statement
    | NONTERM_statementNoLabel
    | NONTERM_expression
    | NONTERM_integerList
    | NONTERM_dataList
    | NONTERM_data

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | INTEGER _ -> 0 
  | LABEL _ -> 1 
  | IDENTIFIER _ -> 2 
  | STRING _ -> 3 
  | DIV  -> 4 
  | AND  -> 5 
  | SHIFTR  -> 6 
  | SHIFTL  -> 7 
  | OR  -> 8 
  | NOT  -> 9 
  | XOR  -> 10 
  | NOR  -> 11 
  | SETIP  -> 12 
  | SETSP  -> 13 
  | INC  -> 14 
  | EOF  -> 15 
  | CMP  -> 16 
  | GETSP  -> 17 
  | SWRITE  -> 18 
  | SREAD  -> 19 
  | BYTE  -> 20 
  | WORD  -> 21 
  | DWORD  -> 22 
  | NEWLINE  -> 23 
  | COMMA  -> 24 
  | SUB  -> 25 
  | MUL  -> 26 
  | GETIP  -> 27 
  | RET  -> 28 
  | JUMP  -> 29 
  | JUMPIFL  -> 30 
  | JUMPIFLE  -> 31 
  | JUMPIFG  -> 32 
  | JUMPIFGE  -> 33 
  | ALLOCA  -> 34 
  | HALT  -> 35 
  | PROC  -> 36 
  | ENDP  -> 37 
  | PUSH  -> 38 
  | POP  -> 39 
  | ADD  -> 40 
  | NOP  -> 41 
  | CALL  -> 42 
  | NCALL  -> 43 
  | WRITE  -> 44 
  | NWRITE  -> 45 
  | READ  -> 46 
  | NREAD  -> 47 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_INTEGER 
  | 1 -> TOKEN_LABEL 
  | 2 -> TOKEN_IDENTIFIER 
  | 3 -> TOKEN_STRING 
  | 4 -> TOKEN_DIV 
  | 5 -> TOKEN_AND 
  | 6 -> TOKEN_SHIFTR 
  | 7 -> TOKEN_SHIFTL 
  | 8 -> TOKEN_OR 
  | 9 -> TOKEN_NOT 
  | 10 -> TOKEN_XOR 
  | 11 -> TOKEN_NOR 
  | 12 -> TOKEN_SETIP 
  | 13 -> TOKEN_SETSP 
  | 14 -> TOKEN_INC 
  | 15 -> TOKEN_EOF 
  | 16 -> TOKEN_CMP 
  | 17 -> TOKEN_GETSP 
  | 18 -> TOKEN_SWRITE 
  | 19 -> TOKEN_SREAD 
  | 20 -> TOKEN_BYTE 
  | 21 -> TOKEN_WORD 
  | 22 -> TOKEN_DWORD 
  | 23 -> TOKEN_NEWLINE 
  | 24 -> TOKEN_COMMA 
  | 25 -> TOKEN_SUB 
  | 26 -> TOKEN_MUL 
  | 27 -> TOKEN_GETIP 
  | 28 -> TOKEN_RET 
  | 29 -> TOKEN_JUMP 
  | 30 -> TOKEN_JUMPIFL 
  | 31 -> TOKEN_JUMPIFLE 
  | 32 -> TOKEN_JUMPIFG 
  | 33 -> TOKEN_JUMPIFGE 
  | 34 -> TOKEN_ALLOCA 
  | 35 -> TOKEN_HALT 
  | 36 -> TOKEN_PROC 
  | 37 -> TOKEN_ENDP 
  | 38 -> TOKEN_PUSH 
  | 39 -> TOKEN_POP 
  | 40 -> TOKEN_ADD 
  | 41 -> TOKEN_NOP 
  | 42 -> TOKEN_CALL 
  | 43 -> TOKEN_NCALL 
  | 44 -> TOKEN_WRITE 
  | 45 -> TOKEN_NWRITE 
  | 46 -> TOKEN_READ 
  | 47 -> TOKEN_NREAD 
  | 50 -> TOKEN_end_of_input
  | 48 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startprogram 
    | 1 -> NONTERM_program 
    | 2 -> NONTERM_sourceElementList 
    | 3 -> NONTERM_sourceElementList 
    | 4 -> NONTERM_procDefinition 
    | 5 -> NONTERM_statementList 
    | 6 -> NONTERM_statementList 
    | 7 -> NONTERM_statement 
    | 8 -> NONTERM_statement 
    | 9 -> NONTERM_statementNoLabel 
    | 10 -> NONTERM_statementNoLabel 
    | 11 -> NONTERM_statementNoLabel 
    | 12 -> NONTERM_statementNoLabel 
    | 13 -> NONTERM_statementNoLabel 
    | 14 -> NONTERM_statementNoLabel 
    | 15 -> NONTERM_statementNoLabel 
    | 16 -> NONTERM_statementNoLabel 
    | 17 -> NONTERM_statementNoLabel 
    | 18 -> NONTERM_statementNoLabel 
    | 19 -> NONTERM_statementNoLabel 
    | 20 -> NONTERM_statementNoLabel 
    | 21 -> NONTERM_statementNoLabel 
    | 22 -> NONTERM_statementNoLabel 
    | 23 -> NONTERM_statementNoLabel 
    | 24 -> NONTERM_statementNoLabel 
    | 25 -> NONTERM_statementNoLabel 
    | 26 -> NONTERM_statementNoLabel 
    | 27 -> NONTERM_statementNoLabel 
    | 28 -> NONTERM_statementNoLabel 
    | 29 -> NONTERM_statementNoLabel 
    | 30 -> NONTERM_statementNoLabel 
    | 31 -> NONTERM_statementNoLabel 
    | 32 -> NONTERM_statementNoLabel 
    | 33 -> NONTERM_statementNoLabel 
    | 34 -> NONTERM_statementNoLabel 
    | 35 -> NONTERM_statementNoLabel 
    | 36 -> NONTERM_statementNoLabel 
    | 37 -> NONTERM_statementNoLabel 
    | 38 -> NONTERM_statementNoLabel 
    | 39 -> NONTERM_statementNoLabel 
    | 40 -> NONTERM_statementNoLabel 
    | 41 -> NONTERM_statementNoLabel 
    | 42 -> NONTERM_statementNoLabel 
    | 43 -> NONTERM_statementNoLabel 
    | 44 -> NONTERM_statementNoLabel 
    | 45 -> NONTERM_statementNoLabel 
    | 46 -> NONTERM_statementNoLabel 
    | 47 -> NONTERM_statementNoLabel 
    | 48 -> NONTERM_expression 
    | 49 -> NONTERM_expression 
    | 50 -> NONTERM_integerList 
    | 51 -> NONTERM_integerList 
    | 52 -> NONTERM_dataList 
    | 53 -> NONTERM_dataList 
    | 54 -> NONTERM_data 
    | 55 -> NONTERM_data 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 50 
let _fsyacc_tagOfErrorTerminal = 48

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | INTEGER _ -> "INTEGER" 
  | LABEL _ -> "LABEL" 
  | IDENTIFIER _ -> "IDENTIFIER" 
  | STRING _ -> "STRING" 
  | DIV  -> "DIV" 
  | AND  -> "AND" 
  | SHIFTR  -> "SHIFTR" 
  | SHIFTL  -> "SHIFTL" 
  | OR  -> "OR" 
  | NOT  -> "NOT" 
  | XOR  -> "XOR" 
  | NOR  -> "NOR" 
  | SETIP  -> "SETIP" 
  | SETSP  -> "SETSP" 
  | INC  -> "INC" 
  | EOF  -> "EOF" 
  | CMP  -> "CMP" 
  | GETSP  -> "GETSP" 
  | SWRITE  -> "SWRITE" 
  | SREAD  -> "SREAD" 
  | BYTE  -> "BYTE" 
  | WORD  -> "WORD" 
  | DWORD  -> "DWORD" 
  | NEWLINE  -> "NEWLINE" 
  | COMMA  -> "COMMA" 
  | SUB  -> "SUB" 
  | MUL  -> "MUL" 
  | GETIP  -> "GETIP" 
  | RET  -> "RET" 
  | JUMP  -> "JUMP" 
  | JUMPIFL  -> "JUMPIFL" 
  | JUMPIFLE  -> "JUMPIFLE" 
  | JUMPIFG  -> "JUMPIFG" 
  | JUMPIFGE  -> "JUMPIFGE" 
  | ALLOCA  -> "ALLOCA" 
  | HALT  -> "HALT" 
  | PROC  -> "PROC" 
  | ENDP  -> "ENDP" 
  | PUSH  -> "PUSH" 
  | POP  -> "POP" 
  | ADD  -> "ADD" 
  | NOP  -> "NOP" 
  | CALL  -> "CALL" 
  | NCALL  -> "NCALL" 
  | WRITE  -> "WRITE" 
  | NWRITE  -> "NWRITE" 
  | READ  -> "READ" 
  | NREAD  -> "NREAD" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | INTEGER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LABEL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IDENTIFIER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DIV  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | SHIFTR  -> (null : System.Object) 
  | SHIFTL  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | XOR  -> (null : System.Object) 
  | NOR  -> (null : System.Object) 
  | SETIP  -> (null : System.Object) 
  | SETSP  -> (null : System.Object) 
  | INC  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | CMP  -> (null : System.Object) 
  | GETSP  -> (null : System.Object) 
  | SWRITE  -> (null : System.Object) 
  | SREAD  -> (null : System.Object) 
  | BYTE  -> (null : System.Object) 
  | WORD  -> (null : System.Object) 
  | DWORD  -> (null : System.Object) 
  | NEWLINE  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | SUB  -> (null : System.Object) 
  | MUL  -> (null : System.Object) 
  | GETIP  -> (null : System.Object) 
  | RET  -> (null : System.Object) 
  | JUMP  -> (null : System.Object) 
  | JUMPIFL  -> (null : System.Object) 
  | JUMPIFLE  -> (null : System.Object) 
  | JUMPIFG  -> (null : System.Object) 
  | JUMPIFGE  -> (null : System.Object) 
  | ALLOCA  -> (null : System.Object) 
  | HALT  -> (null : System.Object) 
  | PROC  -> (null : System.Object) 
  | ENDP  -> (null : System.Object) 
  | PUSH  -> (null : System.Object) 
  | POP  -> (null : System.Object) 
  | ADD  -> (null : System.Object) 
  | NOP  -> (null : System.Object) 
  | CALL  -> (null : System.Object) 
  | NCALL  -> (null : System.Object) 
  | WRITE  -> (null : System.Object) 
  | NWRITE  -> (null : System.Object) 
  | READ  -> (null : System.Object) 
  | NREAD  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 2us; 65535us; 0us; 4us; 2us; 5us; 1us; 65535us; 7us; 8us; 2us; 65535us; 7us; 10us; 8us; 11us; 3us; 65535us; 7us; 14us; 8us; 14us; 12us; 13us; 1us; 65535us; 18us; 19us; 2us; 65535us; 55us; 56us; 57us; 58us; 1us; 65535us; 53us; 54us; 2us; 65535us; 53us; 66us; 64us; 65us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 8us; 10us; 13us; 17us; 19us; 22us; 24us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 2us; 1us; 3us; 1us; 1us; 1us; 2us; 1us; 3us; 1us; 4us; 1us; 4us; 2us; 4us; 6us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 1us; 26us; 1us; 27us; 1us; 28us; 1us; 29us; 1us; 30us; 1us; 31us; 1us; 32us; 1us; 33us; 1us; 34us; 1us; 35us; 1us; 36us; 1us; 37us; 1us; 38us; 1us; 39us; 1us; 40us; 1us; 41us; 1us; 42us; 1us; 43us; 1us; 44us; 1us; 45us; 2us; 45us; 52us; 1us; 46us; 2us; 46us; 50us; 1us; 47us; 2us; 47us; 50us; 1us; 48us; 1us; 49us; 1us; 50us; 1us; 50us; 1us; 51us; 1us; 52us; 1us; 52us; 1us; 53us; 1us; 54us; 1us; 55us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 7us; 9us; 11us; 13us; 15us; 17us; 20us; 22us; 24us; 26us; 28us; 30us; 32us; 34us; 36us; 38us; 40us; 42us; 44us; 46us; 48us; 50us; 52us; 54us; 56us; 58us; 60us; 62us; 64us; 66us; 68us; 70us; 72us; 74us; 76us; 78us; 80us; 82us; 84us; 86us; 88us; 90us; 92us; 94us; 96us; 98us; 100us; 102us; 104us; 106us; 108us; 110us; 113us; 115us; 118us; 120us; 123us; 125us; 127us; 129us; 131us; 133us; 135us; 137us; 139us; 141us; |]
let _fsyacc_action_rows = 69
let _fsyacc_actionTableElements = [|1us; 32768us; 36us; 6us; 0us; 49152us; 2us; 32768us; 15us; 3us; 36us; 6us; 0us; 16385us; 0us; 16386us; 0us; 16387us; 1us; 32768us; 2us; 7us; 40us; 32768us; 1us; 12us; 4us; 43us; 5us; 44us; 6us; 49us; 7us; 50us; 8us; 45us; 9us; 46us; 10us; 47us; 11us; 48us; 12us; 51us; 13us; 52us; 14us; 22us; 16us; 33us; 17us; 38us; 18us; 39us; 19us; 40us; 20us; 53us; 21us; 55us; 22us; 57us; 25us; 41us; 26us; 42us; 27us; 34us; 28us; 15us; 29us; 23us; 30us; 24us; 31us; 25us; 32us; 26us; 33us; 27us; 34us; 32us; 35us; 35us; 38us; 18us; 39us; 20us; 40us; 17us; 41us; 16us; 42us; 36us; 43us; 37us; 44us; 30us; 45us; 31us; 46us; 28us; 47us; 29us; 41us; 32768us; 1us; 12us; 4us; 43us; 5us; 44us; 6us; 49us; 7us; 50us; 8us; 45us; 9us; 46us; 10us; 47us; 11us; 48us; 12us; 51us; 13us; 52us; 14us; 22us; 16us; 33us; 17us; 38us; 18us; 39us; 19us; 40us; 20us; 53us; 21us; 55us; 22us; 57us; 25us; 41us; 26us; 42us; 27us; 34us; 28us; 15us; 29us; 23us; 30us; 24us; 31us; 25us; 32us; 26us; 33us; 27us; 34us; 32us; 35us; 35us; 37us; 9us; 38us; 18us; 39us; 20us; 40us; 17us; 41us; 16us; 42us; 36us; 43us; 37us; 44us; 30us; 45us; 31us; 46us; 28us; 47us; 29us; 0us; 16388us; 0us; 16389us; 0us; 16390us; 39us; 32768us; 4us; 43us; 5us; 44us; 6us; 49us; 7us; 50us; 8us; 45us; 9us; 46us; 10us; 47us; 11us; 48us; 12us; 51us; 13us; 52us; 14us; 22us; 16us; 33us; 17us; 38us; 18us; 39us; 19us; 40us; 20us; 53us; 21us; 55us; 22us; 57us; 25us; 41us; 26us; 42us; 27us; 34us; 28us; 15us; 29us; 23us; 30us; 24us; 31us; 25us; 32us; 26us; 33us; 27us; 34us; 32us; 35us; 35us; 38us; 18us; 39us; 20us; 40us; 17us; 41us; 16us; 42us; 36us; 43us; 37us; 44us; 30us; 45us; 31us; 46us; 28us; 47us; 29us; 0us; 16391us; 0us; 16392us; 0us; 16393us; 0us; 16394us; 0us; 16395us; 2us; 32768us; 0us; 59us; 2us; 60us; 0us; 16396us; 1us; 32768us; 2us; 21us; 0us; 16397us; 0us; 16398us; 0us; 16399us; 0us; 16400us; 0us; 16401us; 0us; 16402us; 0us; 16403us; 0us; 16404us; 0us; 16405us; 0us; 16406us; 0us; 16407us; 0us; 16408us; 0us; 16409us; 0us; 16410us; 0us; 16411us; 0us; 16412us; 0us; 16413us; 0us; 16414us; 0us; 16415us; 0us; 16416us; 0us; 16417us; 0us; 16418us; 0us; 16419us; 0us; 16420us; 0us; 16421us; 0us; 16422us; 0us; 16423us; 0us; 16424us; 0us; 16425us; 0us; 16426us; 0us; 16427us; 0us; 16428us; 2us; 32768us; 0us; 67us; 3us; 68us; 1us; 16429us; 24us; 64us; 1us; 32768us; 0us; 63us; 1us; 16430us; 24us; 61us; 1us; 32768us; 0us; 63us; 1us; 16431us; 24us; 61us; 0us; 16432us; 0us; 16433us; 1us; 32768us; 0us; 62us; 0us; 16434us; 0us; 16435us; 2us; 32768us; 0us; 67us; 3us; 68us; 0us; 16436us; 0us; 16437us; 0us; 16438us; 0us; 16439us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 6us; 7us; 8us; 9us; 11us; 52us; 94us; 95us; 96us; 97us; 137us; 138us; 139us; 140us; 141us; 142us; 145us; 146us; 148us; 149us; 150us; 151us; 152us; 153us; 154us; 155us; 156us; 157us; 158us; 159us; 160us; 161us; 162us; 163us; 164us; 165us; 166us; 167us; 168us; 169us; 170us; 171us; 172us; 173us; 174us; 175us; 176us; 177us; 178us; 179us; 180us; 183us; 185us; 187us; 189us; 191us; 193us; 194us; 195us; 197us; 198us; 199us; 202us; 203us; 204us; 205us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 2us; 4us; 1us; 2us; 2us; 1us; 1us; 1us; 1us; 2us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 2us; 1us; 1us; 3us; 1us; 3us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 4us; 4us; 5us; 5us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 7us; 7us; 8us; 8us; 9us; 9us; 10us; 10us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 16387us; 65535us; 65535us; 65535us; 16388us; 16389us; 16390us; 65535us; 16391us; 16392us; 16393us; 16394us; 16395us; 65535us; 16396us; 65535us; 16397us; 16398us; 16399us; 16400us; 16401us; 16402us; 16403us; 16404us; 16405us; 16406us; 16407us; 16408us; 16409us; 16410us; 16411us; 16412us; 16413us; 16414us; 16415us; 16416us; 16417us; 16418us; 16419us; 16420us; 16421us; 16422us; 16423us; 16424us; 16425us; 16426us; 16427us; 16428us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16432us; 16433us; 65535us; 16434us; 16435us; 65535us; 16436us; 16437us; 16438us; 16439us; |]
let _fsyacc_reductions ()  =    [| 
# 416 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  Program )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startprogram));
# 425 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'sourceElementList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 25 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                   Program (List.rev _1) 
                   )
# 25 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 :  Program ));
# 436 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'procDefinition)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 28 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                          [_1] 
                   )
# 28 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'sourceElementList));
# 447 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'sourceElementList)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'procDefinition)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 29 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                        _2::_1 
                   )
# 29 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'sourceElementList));
# 459 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'statementList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                         procedureDefinition(_2, List.rev _3) 
                   )
# 32 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'procDefinition));
# 471 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                       [_1] 
                   )
# 35 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementList));
# 482 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'statementList)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                 _2::_1 
                   )
# 36 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementList));
# 494 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'statementNoLabel)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                label(_1, _2) 
                   )
# 39 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statement));
# 506 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'statementNoLabel)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                            _1 
                   )
# 40 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statement));
# 517 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                  ret() 
                   )
# 43 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 527 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                  nop() 
                   )
# 44 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 537 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                  add() 
                   )
# 45 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 547 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                           push(_2) 
                   )
# 46 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 558 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                          pop(_2) 
                   )
# 47 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 569 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                  inc() 
                   )
# 48 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 579 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                   jump() 
                   )
# 49 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 589 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                     jumpIf(false, true) 
                   )
# 50 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 599 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                      jumpIf(true, true) 
                   )
# 51 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 609 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                     jumpIf(false, false) 
                   )
# 52 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 619 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                      jumpIf(true, false) 
                   )
# 53 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 629 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                   read() 
                   )
# 54 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 639 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                    readNative() 
                   )
# 55 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 649 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                    write() 
                   )
# 56 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 659 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                    writeNative() 
                   )
# 57 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 669 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                    alloca() 
                   )
# 58 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 679 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                  compare() 
                   )
# 59 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 689 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                    getIp() 
                   )
# 60 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 699 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                   halt() 
                   )
# 61 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 709 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                   call() 
                   )
# 62 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 719 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                    callNative() 
                   )
# 63 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 729 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                    getSp() 
                   )
# 64 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 739 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                    stackWrite() 
                   )
# 65 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 749 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                    stackRead() 
                   )
# 66 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 759 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                  sub() 
                   )
# 67 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 769 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                  mul() 
                   )
# 68 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 779 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                  div() 
                   )
# 69 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 789 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                  bitAnd() 
                   )
# 70 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 799 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                 bitOr() 
                   )
# 71 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 809 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                  bitNot() 
                   )
# 72 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 819 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                  xor() 
                   )
# 73 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 829 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                  nor() 
                   )
# 74 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 839 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                    shiftRight() 
                   )
# 75 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 849 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                    shiftLeft() 
                   )
# 76 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 859 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                    setIp() 
                   )
# 77 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 869 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                    setSp() 
                   )
# 78 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 879 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'dataList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                          memoryByte(List.rev _2) 
                   )
# 79 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 890 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'integerList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                            memoryWord(List.rev _2) 
                   )
# 80 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 901 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'integerList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                             memoryDword(List.rev _2) 
                   )
# 81 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'statementNoLabel));
# 912 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                     number(_1) 
                   )
# 84 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'expression));
# 923 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                       identifier(_1) 
                   )
# 85 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'expression));
# 934 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'integerList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                                   _3::_1 
                   )
# 88 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'integerList));
# 946 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                     [_1] 
                   )
# 89 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'integerList));
# 957 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'dataList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'data)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                              _3::_1 
                   )
# 92 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'dataList));
# 969 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'data)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                   [_1] 
                   )
# 93 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'dataList));
# 980 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                     [_1] 
                   )
# 96 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'data));
# 991 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                                                    getStringBytes(_1) 
                   )
# 97 "ES.Sacara.Ir.Parser\SacaraIrParser.fsy"
                 : 'data));
|]
# 1003 "ES.Sacara.Ir.Parser\SacaraIrParser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 51;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let program lexer lexbuf :  Program  =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
