%{

open System
open ES.Sacara.Ir.Parser.IrAst
open ES.Sacara.Ir.Parser.IrParserUtility

%}

%start program
%token PROC ENDP PUSH POP ADD NOP CALL NCALL WRITE NWRITE READ NREAD 
%token GETIP RET JUMP JUMPIFL JUMPIFLE JUMPIFG JUMPIFGE ALLOCA HALT 
%token CMP GETSP SWRITE SREAD BYTE WORD DWORD NEWLINE COMMA EOF

%token <bool> BOOLEAN
%token <string> STRING
%token <string> IDENTIFIER
%token <string> LABEL
%token <int32> INTEGER

%type < Program > program

%%

program:
    | sourceElementList EOF																	{ Program (List.rev $1) }

sourceElementList:
	| procDefinition																		{ [$1] }
	| sourceElementList procDefinition														{ $2::$1 }

procDefinition:
	| PROC IDENTIFIER statementList ENDP													{ procedureDefinition($2, List.rev $3) }

statementList:
	| statement																				{ [$1] }
	| statementList statement																{ $2::$1 }

statement:
	| LABEL statementNoLabel																{ label($1, $2) }
	| statementNoLabel																		{ $1 }

statementNoLabel:
	| RET																					{ ret() }
	| NOP																					{ nop() }
	| ADD																					{ add() }
	| PUSH expression																		{ push($2) }
	| POP IDENTIFIER																		{ pop($2) }	
	| JUMP																					{ jump() }
	| JUMPIFL																				{ jumpIf(false, true) }
	| JUMPIFLE																				{ jumpIf(true, true) }
	| JUMPIFG																				{ jumpIf(false, false) }
	| JUMPIFGE																				{ jumpIf(true, false) }	
	| READ																					{ read() }
	| NREAD																					{ readNative() }
	| WRITE																					{ write() }
	| NWRITE																				{ writeNative() }
	| ALLOCA																				{ alloca() }
	| BYTE INTEGER																			{ memoryByte($2) }
	| WORD INTEGER																			{ memoryWord($2) }
	| DWORD INTEGER																			{ memoryDword($2) }
	| CMP																					{ compare() }
	| GETIP																					{ getIp() }
	| HALT																					{ halt() }
	| CALL																					{ call() }
	| NCALL																					{ callNative() }
	| GETSP																					{ getSp() }
	| SWRITE																				{ stackWrite() }
	| SREAD																					{ stackRead() }
	
expression:
	| INTEGER																				{ number($1) }
	| IDENTIFIER																			{ identifier($1) }